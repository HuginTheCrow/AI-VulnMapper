
import json
import pty
import re
import socket
import subprocess
import time
from typing import List, Dict

from pymetasploit3.msfrpc import MsfRpcClient

from config import MSF_INDEX_FILE
from utils.logger import Logger
from constants import ExploitManagerConstants


class ExploitManager:
    """
    Class for testing and executing exploits using Metasploit Framework.
    """

    def __init__(self, host='127.0.0.1', password='msf', port=55552):
        self.logger = Logger(__name__).get_logger()
        self.client = self._start_msf(host, password, port)
        with open(MSF_INDEX_FILE, 'r') as f:
            self.msf_index = json.load(f)
        self.max_try_payloads = 3

    def _start_msf(self, host, password, port) -> MsfRpcClient:
        """
        Starts the Metasploit Framework RPC server.

        Args:
            host (str): The hostname or IP address where the MSF RPC server will bind to.
            password (str): The password to connect to the MSF RPC server.
            port (int): The port number where the MSF RPC server will bind to.

        Returns:
            MsfRpcClient: An instance of the MsfRpcClient, which is connected to the started MSF RPC server.

        Raises:
            TimeoutError: If failed to start MSF and establish a connection within the timeout period.
        """
        self.logger.info(ExploitManagerConstants.START_MSF)
        master, slave = pty.openpty()
        subprocess.Popen(
            ['msfconsole', '-qx', f'load msgrpc ServerHost={host} Pass={password}'],
            stdin=slave, stdout=slave, stderr=slave, universal_newlines=True
        )
        if self._wait_msf_ready(host, port):
            self.logger.info(ExploitManagerConstants.MSF_SUCCESSFUL)
            return MsfRpcClient(password, port=port)
        else:
            self.logger.error(ExploitManagerConstants.MSF_ERROR)
            raise TimeoutError(ExploitManagerConstants.MSF_ERROR)

    def _wait_msf_ready(self, host: str, port: int, timeout=30) -> bool:
        """
        Waits until the MSF RPC server is ready.